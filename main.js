// Generated by CoffeeScript 1.7.1
(function() {
  var EmailInput, Form, PasswordInput, R, ValidationMixin, form, input, label, p, _ref;

  _ref = React.DOM, input = _ref.input, label = _ref.label, form = _ref.form, p = _ref.p;

  R = React.DOM;

  Form = React.createClass({
    getInitialState: function() {
      return {
        emailValidity: '',
        passwordValidity: ''
      };
    },
    render: function() {
      return form(null, EmailInput({
        len: 5,
        requiredContent: "@",
        setParentState: this.setValidity,
        validity: this.state.emailValidity
      }), PasswordInput({
        len: 6,
        setParentState: this.setValidity,
        validity: this.state.passwordValidity
      }));
    },
    setValidity: function(validity) {
      return this.setState(validity);
    }
  });

  ValidationMixin = {
    lengthIsValid: function(e) {
      var inputText, len;
      len = this.props.len;
      inputText = e.target.value;
      if (inputText.length >= len) {
        return true;
      } else {
        return false;
      }
    },
    contentIsValid: function(e) {
      var content, matchFound, requiredContent, _i, _len, _results;
      requiredContent = this.props.requiredContent;
      matchFound = function(requiredContent) {
        if (e.target.value.indexOf(requiredContent) > -1) {
          return true;
        } else {
          return false;
        }
      };
      if (typeof requiredContent === "string") {
        return matchFound(requiredContent);
      } else {
        _results = [];
        for (_i = 0, _len = requiredContent.length; _i < _len; _i++) {
          content = requiredContent[_i];
          _results.push(matchFound(content));
        }
        return _results;
      }
    }
  };

  EmailInput = React.createClass({
    mixins: [ValidationMixin],
    validate: function(e) {
      if (this.lengthIsValid(e) && this.contentIsValid(e)) {
        return this.props.setParentState({
          emailValidity: 'valid'
        });
      } else {
        return this.props.setParentState({
          emailValidity: 'invalid'
        });
      }
    },
    render: function() {
      return p(null, label(null, 'Email'), input({
        type: 'text',
        onChange: this.validate,
        className: this.props.validity
      }));
    }
  });

  PasswordInput = React.createClass({
    mixins: [ValidationMixin],
    validate: function(e) {
      if (this.lengthIsValid(e)) {
        return this.props.setParentState({
          passwordValidity: 'valid'
        });
      } else {
        return this.props.setParentState(passwordValidity('invalid'));
      }
    },
    render: function() {
      return R.p(null, label(null, "Password"), input({
        type: "password",
        onChange: this.validate,
        className: this.props.validity
      }));
    }
  });

  React.renderComponent(Form(), document.getElementById('content'));

}).call(this);
